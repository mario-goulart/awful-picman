(define (tag-include tags)
  (render-dynamic-inputs 'include-tags 0 tags))

(define (tag-exclude tags)
  (render-dynamic-inputs 'exclude-tags 1 tags))

(define (render-filter-input include-tags exclude-tags)
  (create-dynamic-input-ajax 'include-tags "/db/tags")
  (create-dynamic-input-ajax 'exclude-tags "/db/tags")
  (add-dynamic-input-javascript-utils)

  `(,(render-top-bar 'filter)
    (div (@ (class "filter-input"))
         (form (@ (method "get")
                  (action ,(make-pathname (filters-web-dir) "by-tags")))
               (div (@ (class "row"))
                    (div (@ (class "span3"))
                         ,(_ "Show pictures tagged with "))
                    (div (@ (class "span3"))
                         ,(tag-include include-tags)
                         ","))
               (div (@ (class "row"))
                    (div (@ (class "span3"))
                         ,(_ " except those tagged with "))
                    (div (@ (class "span3"))
                         ,(tag-exclude exclude-tags)))
               (input (@ (type "submit")
                         (value ,(_ "Filter"))))))))

(define (form-tags include-tags exclude-tags)
  (append (map (lambda (tag)
                 (cons 'include-tags tag))
               include-tags)
          (map (lambda (tag)
                 (cons 'exclude-tags tag))
               exclude-tags)))

(define (render-matches matches)
  (let ((num-matches (length matches)))
    `(h4 ,(if (zero? num-matches)
              (_ "No match")
              `(,num-matches " " ,(if (= 1 num-matches)
                                      (_ "match")
                                      (_ "matches")))))))

(define (render-filter/by-tags include-tags exclude-tags page-num)
  `(,(render-filter-input include-tags exclude-tags)
    ,(if (null? include-tags)
         '()
         (let ((filtered-pic-paths (db-tag-filter include-tags exclude-tags)))
           (debug 2 "render-filtered-pictures: filter results: ~S" filtered-pic-paths)
           `((div (@ (id "filter-matches"))
                  ,(render-matches filtered-pic-paths))
             ,(render-paginated-pics filtered-pic-paths
                                     page-num
                                     'filter/by-tags
                                     url-vars/vals: (form-tags include-tags exclude-tags)))))))

(define (render-filter/without-album page-num)
  (let ((pics-without-album (db-filter/without-album)))
    `((h3 ,(_ "Pics without album"))
      ,(render-matches pics-without-album)
      ,(render-paginated-pics pics-without-album page-num 'filter/without-album))))

(define (render-filter/without-tag page-num)
  (let ((pics-without-tag (db-filter/without-tag)))
    `((h3 ,(_ "Pics without tag"))
      ,(render-matches pics-without-tag)
      ,(render-paginated-pics pics-without-tag page-num 'filter/without-tag))))

(define (render-filters-menu mode)

  (define (item path text)
    `(li (a (@ (href ,(make-pathname (filters-web-dir) path))) ,text)))

  `(li (@ (class ,(string-append "dropdown"
                                 (if (eq? mode 'filter)
                                     " active"
                                     ""))))
       (a (@ (class "dropdown-toggle")
             (data-toggle "dropdown")
             (href "#"))
          ,(_ "Filters"))
       (ul (@ (class "dropdown-menu")
              (role "menu")
              (aria-labelledby "dLabel"))
           ,(item "by-tags" (_ "By tags"))
           ,(item "without-album" (_ "Pics without album"))
           ,(item "without-tag" (_ "Pics without tag"))
           )))

(define (render-filters)
  (define (filter-link path text)
    `(li (a (@ (href ,(make-pathname (filters-web-dir) path))) ,text)))
  `(,(render-top-bar 'filter)
    (ul
     ,(filter-link "by-tags" (_ "Filter by tags"))
     ,(filter-link "without-album" (_ "Pics without album"))
     ,(filter-link "without-tag" (_ "Pics without tag")))))
