;; -*- scheme -*-
(use posix make)

(define awful-picman-version "0.0.1")

(define debug? (get-environment-variable "AWFUL_PICMAN_DEBUG"))

(define make-targets (get-environment-variable "MAKE_TARGETS"))

(define base-dir (current-directory))
(define src-dir (make-pathname base-dir "src"))

(define-syntax cd
  (syntax-rules ()
    ((_ dir body ...)
     (let ((cur (current-directory)))
       (change-directory dir)
       body ...
       (change-directory cur)))))

(define csc-options
  (if debug?
      '(-S -O0 -d2)
      '(-O3 -d1) ;; -d0 makes awful-picman break (see http://bugs.call-cc.org/ticket/1041)
      ))

(define modules/deps
  `(awful-picman-params
    (awful-picman-utils "awful-picman-params.import.so")
    (awful-picman-db "awful-picman-utils.import.so")
    (awful-picman-image "awful-picman-params.import.so"
                        "awful-picman-utils.import.so")
    (awful-picman-conf "awful-picman-params.import.so"
                       "awful-picman-utils.import.so")
    (awful-picman-process-dir "awful-picman-params.import.so"
                              "awful-picman-utils.import.so"
                              "awful-picman-db.import.so"
                              "awful-picman-image.import.so")
    (awful-picman-ocr "awful-picman-params.import.so"
                      "awful-picman-utils.import.so")
    ,(cons 'awful-picman-renderers
           (append
            '("awful-picman-params.import.so"
              "awful-picman-utils.import.so"
              "awful-picman-db.import.so"
              "awful-picman-image.import.so"
              "awful-picman-ocr.import.so")
            (map (lambda (file)
                   (make-pathname "renderers" file))
                 '("ajax-handlers.scm"
                   "album.scm"
                   "breadcrumbs.scm"
                   "common.scm"
                   "dynamic-input.scm"
                   "filter.scm"
                   "folder.scm"
                   "tag.scm"))))
    (awful-picman-export "awful-picman-params.import.so"
                         "awful-picman-utils.import.so"
                         "awful-picman-image.import.so"
                         "awful-picman-db.import.so")
    (awful-picman-dispatcher "awful-picman-params.import.so"
                             "awful-picman-utils.import.so"
                             "awful-picman-image.import.so"
                             "awful-picman-db.import.so"
                             "awful-picman-process-dir.import.so"
                             "awful-picman-renderers.import.so"
                             "awful-picman-process-dir.import.so"
                             "awful-picman-ocr.import.so")
    (awful-picman-db-migrations "awful-picman-params.import.so"
                                "awful-picman-utils.import.so"
                                "awful-picman-db.import.so")
    (awful-picman-gc "awful-picman-params.import.so"
                     "awful-picman-utils.import.so"
                     "awful-picman-db.import.so")
    ))

(define modules
  (map (lambda (mod)
         (if (pair? mod)
             (car mod)
             mod))
       modules/deps))

(define (mod.so mod)
  (sprintf "~a.so" mod))

(define (mod.scm mod)
  (sprintf "~a.scm" mod))

(define (mod.import.so mod)
  (sprintf "~a.import.so" mod))

(define (mod.import.scm mod)
  (sprintf "~a.import.scm" mod))

(define (mod-rule mod . extra-files)
  `((,(mod.so mod)
     ,(cons (mod.scm mod) extra-files)
     ,(lambda ()
        (cd src-dir
            (compile -J -s ,@csc-options ,(mod.scm mod)))))
    (,(mod.import.so mod)
     (,(mod.import.scm mod))
     ,(lambda ()
        (cd src-dir
            (compile -s ,@csc-options ,(mod.import.scm mod)))))))

(make-nonfile-targets '("clean" "build" "install" "install-assets" "i18n" "all"))

(define (cleanup!)
  (cd src-dir
      (for-each delete-file*
                (cons "awful-picman"
                      (append (glob "*~")
                              (glob "*.so")
                              (glob "*.import.scm"))))))

(define *rules* '())

(define (add-rule! target deps #!optional proc)
  (set! *rules*
        (cons (if proc
                  (list target deps proc)
                  (list target deps))
              *rules*)))

;; Module rules
(set! *rules*
      (append (apply append
                     (map (lambda (mod/extra-files)
                            (apply mod-rule (if (pair? mod/extra-files)
                                                mod/extra-files
                                                (list mod/extra-files))))
                          modules/deps))
              *rules*))

;; Client-side rules (stuff compiled with spock)
(define client-side-targets '())

(let ((deps
       (map (lambda (file)
              (make-pathname "client-side" file))
            '("sxml-html.scm"
              "jquery.scm"
              "client-side-utils.scm"
              "i18n.scm")))
      (assets-dir (make-pathname (list ".." "assets" "awful-picman") "js")))
  (for-each
   (lambda (file)
     (let* ((out-file-path (make-pathname assets-dir file "js"))
            (source (make-pathname "client-side" file "scm"))
            (sources (append deps (list source))))
       (add-rule! out-file-path
                  sources
                  (lambda ()
                    (cd src-dir
                        (let ((cmd (sprintf "chicken-spock ~a > ~a"
                                       (string-intersperse sources)
                                       out-file-path)))
                          (create-directory assets-dir 'recursively)
                          (print cmd)
                          (system* cmd)))))
       (set! client-side-targets (cons out-file-path client-side-targets))))
   '("awful-picman-pics"
     "awful-picman-albums"
     "awful-picman-tags")))


;; Command line app
(add-rule! "awful-picman" (cons "awful-picman.scm"
                                (map mod.so modules))
           (lambda ()
             (cd src-dir
                 (compile ,@csc-options awful-picman.scm))))

;; Clean
(add-rule! "clean" '() cleanup!)


;; Build
(add-rule! "build" (append (list "awful-picman")
                           (map mod.so modules)
                           (map mod.import.so modules)
                           client-side-targets))

;; Install binaries
(add-rule! "install" '("build")
           (lambda ()
             (cd src-dir
                 ;; Command line app
                 (install-program 'awful-picman
                                  '("awful-picman")
                                  `((version ,awful-picman-version)))
                 ;; Modules
                 (for-each (lambda (mod)
                             (install-extension
                              mod
                              (list (mod.import.so mod) (mod.so mod))
                              `((version ,awful-picman-version))))
                           modules))))

(define (spock-runtime-install-rule)
  (let ((runtime-files '("spock-runtime-debug.js"
                         "spock-runtime-min.js")))
    (map (lambda (runtime-file)
           (list (make-pathname (list (repository-path) "spock") runtime-file)
                 (make-pathname (list "assets" "spock" "js") runtime-file)))
         runtime-files)))

;; Install assets
(add-rule! "install-assets" client-side-targets
           (lambda ()
             (cd base-dir
                 (install-extension
                  'awful-picman-assets
                  `(("assets"  "awful-picman/assets")
                    ,@(spock-runtime-install-rule)
                    ("locale" "awful-picman/locale"))
                  `((version ,awful-picman-version))))))

;; i18n
(add-rule! "i18n" '()
           (lambda ()
             (cd base-dir
                 (system* "csi -s bin/sgettext.scm src/*.scm src/renderers/*.scm > locale/awful-picman.pot")
                 (for-each
                  (lambda (lang)
                    (let ((po (sprintf "locale/~a/LC_MESSAGES/awful-picman.po" lang)))
                      (unless (file-exists? po)
                        (with-output-to-file po (cut display "")))
                      (system*
                       (sprintf "msgmerge -s -U ~a locale/awful-picman.pot" po))
                      (system*
                       (sprintf "msgfmt ~a -o locale/~a/LC_MESSAGES/awful-picman.mo"
                                po lang))))
                  '(pt_BR)))))

;; All
(add-rule! "all" '("build" "install" "install-assets" "i18n"))

(cd src-dir
    (make/proc *rules* (or make-targets "all")))
